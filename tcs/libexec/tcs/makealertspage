#!/usr/bin/env python3

import os
from datetime import datetime
from datetime import timezone
import json
import re
import math
import platform

if platform.node().startswith("coatli"):
    project = "coatli"
    projectname = "COATLI"
elif platform.node().startswith("colibri"):
    project = "colibri"
    projectname = "COLIBRÍ"
elif platform.node().startswith("ddoti"):
    project = "ddoti"
    projectname = "DDOTI"
else:
    raise RuntimeError("unknown project.")

htmlfilename = "/usr/local/var/www/tcs/alerts.html"
jsonfilename = "/usr/local/var/tcs/alerts.json"

htmlfile = open(htmlfilename, "w")


def readjson(filename):
    with open(filename, "r") as f:
        return json.loads(f.read(-1))


def writehtml(s):
    print(s, file=htmlfile)


def formattimestamp(timestamp):
    timestamp = re.sub(r"T", " ", timestamp)
    timestamp = re.sub(r"\.[0-9]*$", "", timestamp)
    return timestamp


def formatage(age):
    if age < 86400:
        return "%.1fh" % (age / 3600)
    else:
        return "%.1fd" % (age / 86400)


def parseangle(angle):
    if angle[-1:] == "r":
        angle = float(angle[:-1])
    elif angle[-1:] == "d":
        angle = math.radians(float(angle[:-1]))
    elif angle[-2:] == "am":
        angle = math.radians(float(angle[:-2]) / 60)
    elif angle[-2:] == "as":
        angle = math.radians(float(angle[:-2]) / 60 / 60)
    else:
        angle = float(angle)
    return angle


def parseinterval(interval):
    if interval[-1:] == "d":
        interval = float(interval[:-1]) * 60 * 60 * 24
    elif interval[-1:] == "h":
        interval = float(interval[:-1]) * 60 * 60
    elif interval[-1:] == "m":
        interval = float(interval[:-1]) * 60
    elif interval[-1:] == "s":
        interval = float(interval[:-1])
    else:
        interval = float(interval)
    return interval


def age(timestamp):
    timestamp = re.sub(r"\.[0-9]*$", "", timestamp)
    event = datetime.fromisoformat(timestamp)
    now = datetime.now()
    age = now - event
    return age.days * 86400 + age.seconds


def maxage(alert):
    if alert["preliminary"] == "true":
        return alert["maxpreliminaryalertdelay"]
    else:
        return alert["maxalertdelay"]


alerts = readjson(jsonfilename)

writehtml(
    """
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">

<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
<link rel="stylesheet" href="style.css" type="text/css"/>
<title>%s: Alerts</title>
</head>

<body>

<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="config.js"></script>
<script type="text/javascript" src="alerts.js"></script>

<div id="title">
<h1>%s: Alerts</h1>
<hr/>
</div>

<div id="body">
"""
    % (projectname, projectname)
)

writehtml(
    """

<p>
<a href="/index.html">Home</a> |
<a href="https://github.com/unam-transients/tcs/wiki/Creating-and-Modifying-Alerts-Manually">Help</a>
</p>

<hr/>

<table class="alertsinputs">
<tr class="alertsinputs">
<td class="alertsinputs"><form id="alert-refresh"><input type="submit" value="Refresh"/></form></td>
<!-- -->
<td class="alertsinputs"><form id="alert-rugby"><input type="submit" value="Rugby"/></form></td>
<!-- -->
</tr>
</table>

<hr/>

<table class="alertsinputs">
<tr class="alertsinputs">
<td class="alertsinputs"><form id="alert-enable"><input type="submit" value="Enable"/></form></td>
<td class="alertsinputs"><form id="alert-disable"><input type="submit" value="Disable"/></form></td>
</tr>
</table>

<hr/>

<table class="alertsinputs">
<tr class="alertsinputs">
<td class="alertsinputs"><form id="alert-modify"><input type="submit" value="Modify"/></form></td>
</tr>
<tr class="alertsinputs">
<td class="alertsinputs">Name</td>
<td class="alertsinputs"><input type="text" id="modify-name" name="modify-name"></td>
</tr>
<tr class="alertsinputs">
<td class="alertsinputs">α</td>
<td class="alertsinputs"><input type="text" id="modify-alpha" name="modify-alpha"></td>
<td>(e.g., 10:23:11.23 or 143.234d)</td>
</tr>
<tr class="alertsinputs">
<td class="alertsinputs">δ</td>
<td class="alertsinputs"><input type="text" id="modify-delta" name="modify-delta"></td>
<td>(e.g., -05:23:11.1 or +22.334d)</td>
</tr>
<tr class="alertsinputs">
<td class="alertsinputs">Uncertainty</td>
<td class="alertsinputs"><input type="text" id="modify-uncertainty" name="modify-uncertainty"></td>
<td>(e.g., 1.8as or 10.2am or 0.33d)
</tr>
<tr class="alertsinputs">
<td class="alertsinputs">Max Age</td>
<td class="alertsinputs"><input type="text" id="modify-max-age" name="modify-max-age"></td>
<td>(e.g., 5.0d)</td>
</tr>
<tr class="alertsinputs">
<td class="alertsinputs">Min HA</td>
<td class="alertsinputs"><input type="text" id="modify-min-hour-angle" name="modify-min-hour-angle"></td>
<td>(e.g., -2.0h)</td>
</tr>
<tr class="alertsinputs">
<td class="alertsinputs">Max HA</td>
<td class="alertsinputs"><input type="text" id="modify-max-hour-angle" name="modify-max-hour-angle"></td>
<td>(e.g., +2.0h)</td>
</tr>
<tr class="alertsinputs">
<td class="alertsinputs">Priority</td>
<td class="alertsinputs"><input type="text" id="modify-priority" name="modify-priority"></td>
<td>(see <a href="https://github.com/unam-transients/tcs/wiki/Alert-Priorities">Alert Priorities</a>)</td>
</tr>
"""
)

writehtml(
    """
<tr class="alertsinputs">
<td class="alertsinputs">Filters</td>
<td class="alertsinputs"><select id="modify-filters" name="modify-filters">
    <option selected="selected"></option>
"""
)
if project == "coatli":
    writehtml(
        """
        <option>r</option>
    """
    )
elif project == "colibri":
    writehtml(
        """
        <option>g/r/i/z/y</option>
        <option>g/r/i/z</option>
        <option>g/r/i/y</option>
        <option>g/r/i/zy</option>

        <option>g/r/z/y</option>
        <option>g/r/z</option>
        <option>g/r/y</option>
        <option>g/r/zy</option>

        <option>g/i/z/y</option>
        <option>g/i/z</option>
        <option>g/i/y</option>
        <option>g/i/zy</option>

        <option>r/i/z/y</option>
        <option>r/i/z</option>
        <option>r/i/y</option>
        <option>r/i/zy</option>

        <option>g/z/y</option>
        <option>g/z</option>
        <option>g/y</option>
        <option>g/zy</option>

        <option>r/z/y</option>
        <option>r/z</option>
        <option>r/y</option>
        <option>r/zy</option>

        <option>i/z/y</option>
        <option>i/z</option>
        <option>i/y</option>
        <option>i/zy</option>

        <option>gri/zy</option>
    """
    )
elif project == "ddoti":
    writehtml(
        """
        <option>w</option>
    """
    )
writehtml(
    """
</select></td>
<td>(see <a href="https://github.com/unam-transients/tcs/wiki/Alert-Filters">Alert Filters</a>)</td>
</tr>
</table>
"""
)

writehtml(
    """
<hr/>

<table class="alertsinputs">
<tr class="alertsinputs">
<td class="alertsinputs"><form id="alert-create"><input type="submit" value="Create"/></form></td>
</tr>
<tr class="alertsinputs">
<td class="alertsinputs">Name</td>
<td class="alertsinputs"><input type="text" id="create-name" name="create-name"></td>
</tr>
<tr class="alertsinputs">
<td class="alertsinputs">Event Time</td>
<td class="alertsinputs"><input type="text" id="create-eventtime" name="create-eventtime"></td>
<td>(e.g., 2025-02-13T23:42:11.234)
</tr>
<tr>
<td class="alertsinputs">α</td>
<td class="alertsinputs"><input type="text" id="create-alpha" name="create-alpha"></td>
<td>(e.g., 10:23:11.23 or 143.234d)</td>
</tr>
<tr class="alertsinputs">
<td class="alertsinputs">δ</td>
<td class="alertsinputs"><input type="text" id="create-delta" name="create-delta"></td>
<td>(e.g., -05:23:11.1 or +22.334d)</td>
</tr>
<tr class="alertsinputs">
<td class="alertsinputs">Uncertainty</td>
<td class="alertsinputs"><input type="text" id="create-uncertainty" name="create-uncertainty"></td>
<td>(e.g., 1.8as or 10.2am or 0.33d)
</tr>
<tr class="alertsinputs">
<td class="alertsinputs">Priority</td>
<td class="alertsinputs"><input type="text" id="create-priority" name="create-priority"></td>
<td>(see <a href="https://github.com/unam-transients/tcs/wiki/Alert-Priorities">Alert Priorities</a>)</td>
</tr>
</table>


<hr/>
"""
)

alerts.sort(key=lambda x: x["eventtimestamp"], reverse=True)

selectablealerts = []
unselectablealerts = []
for alert in alerts:
    if (
        "uncertainty" not in alert.keys()
        or "eventtimestamp" not in alert.keys()
        or "enabled" not in alert.keys()
    ):
        unselectablealerts.append(alert)
    elif alert["enabled"] == "false":
        unselectablealerts.append(alert)
    elif parseangle(alert["uncertainty"]) > parseangle(alert["maxalertuncertainty"]):
        unselectablealerts.append(alert)
    elif age(alert["eventtimestamp"]) > parseinterval(maxage(alert)):
        unselectablealerts.append(alert)
    else:
        selectablealerts.append(alert)

nalertstablecolumns = 18


def writealertstable(alerts, name):
    if len(alerts) == 0:
        writehtml('<tr><th colspan="%d">No %s</th></tr>' % (nalertstablecolumns, name))
        writehtml('<tr><td colspan="%d"><hr/></td></tr>' % nalertstablecolumns)
        return
    else:
        writehtml('<tr><th colspan="%d">%s</th></tr>' % (nalertstablecolumns, name))
        writehtml('<tr><td colspan="%d"><hr/></td></tr>' % nalertstablecolumns)
        writehtml("<tr>")
        for text in [
            "Name",
            "Event Time",
            "Age",
            "Max Age",
            "Min HA",
            "Max HA",
            "α",
            "δ",
            "Epoch",
            "Uncertainty",
            "Priority",
            "Enabled",
            "Filters",
            "Identifier",
            "SVOM Identifier",
            "Swift Identifier",
            "Fermi Identifier",
            "LVC Identifier",
        ]:
            writehtml('<th class="alertstable">%s</th>' % text)
        writehtml("</tr>")
        for alert in alerts:
            writehtml("<tr>")
            for key in [
                "name",
                "eventtimestamp",
                "age",
                "maxage",
                "minha",
                "maxha",
                "alpha",
                "delta",
                "equinox",
                "uncertainty",
                "priority",
                "enabled",
                "filters",
                "identifier",
                "svomidentifier",
                "swiftidentifier",
                "fermiidentifier",
                "lvcidentifier",
            ]:
                writehtml('<td class="alertstable">')
                if key == "age" and "eventtimestamp" in alert.keys():
                    writehtml(formatage(age(alert["eventtimestamp"])))
                elif key == "maxage":
                    writehtml(formatage(parseinterval(maxage(alert))))
                elif key == "filters" and "command" in alert.keys():
                    filters = alert["command"].split()[1]
                    writehtml(filters)
                elif key == "priority" and "fixedpriority" in alert.keys():
                    writehtml(alert["fixedpriority"])
                elif key not in alert.keys():
                    writehtml("—")
                elif key == "identifier":
                    writehtml(
                        '<a href="alerts/%s">%s</a>'
                        % (alert["identifier"], alert["identifier"])
                    )
                elif key == "name":
                    writehtml(
                        '<input type="radio" name="identifier" id="%s" value="%s" class="alertstable"><label for="%s">%s</label>'
                        % (
                            alert["identifier"],
                            alert["identifier"],
                            alert["identifier"],
                            alert[key],
                        )
                    )
                elif key == "eventtimestamp":
                    writehtml(formattimestamp(alert[key]))
                elif alert[key] != "" and alert[key][0] == "-":
                    writehtml("&minus;%s" % alert[key][1:])
                else:
                    writehtml(alert[key])
                writehtml("</td>")
            writehtml("</tr>")


writehtml('<table class="alertstable">')
writealertstable(selectablealerts, "Selectable Alerts")
writehtml('<tr><td colspan="%d"><hr/></td></tr>' % nalertstablecolumns)
writealertstable(unselectablealerts, "Unselectable Alerts")
writehtml("</table>")

writehtml(
    """
</div>

<div>
<hr/>
Updated: %s UTC
</div>

</body>


</html>
"""
    % datetime.now(timezone.utc).replace(tzinfo=None).isoformat(" ", timespec="seconds")
)
