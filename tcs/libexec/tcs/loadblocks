#!/bin/sh

program="tcs $(basename "$0")"

usageerror () {
  echo 1>&2 "usage: $program [-L] [-F] [blockfile]"
  exit 1
}

error () {
  log error "$@"
  exit 1
}

log () {
  level=$1
  shift
  tcs log "$program" $level "$*"
  echo 1>&2 "$(date -u '+%F %T'): $program: $level: $*"
}

optstring=LF
loadlocalonly=false
fetchonly=false
if ! getopt -qQ -- "$optstring" "$@"
then
  usageerror
fi
eval set -- "$(getopt -q -- "$optstring" "$@")"
while test "$1" != "--"
do
  case "$1" in
  -L)
    loadlocalonly=true
    shift
    ;;
  -F)
    fetchonly=true
    shift
    ;;
  *)
    usageerror
    ;;
  esac
done
shift
if test $# = 0
then
  blockfile="$tcsprefix"/etc/tcs/blocks/BLOCKS
  targetdate=$(date +%Y%m%d)
elif test $# = 1
then
  blockfile="$1"
  targetdate=$(date +%Y%m%d)
elif test $# = 2
then
  blockfile="$1"
  case $1 in
  [0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9])
    targetdate="$2"
    ;;
  *)
    targetdate=$(date +%Y%m%d -d "$2")
    ;;
  esac
else
  usageerror
fi

################################################################################

if ! $loadlocalonly
then

  cwd="$(pwd)"

  log summary "fetching blocks."

  case $(hostname) in
  coatli-*)
    url="https://github.com/alanwatsonforster/coatli-blocks.git"
    ;;
  ddoti-*)
    url="https://github.com/alanwatsonforster/ddoti-blocks.git"
    ;;
  colibri-*)
    url="https://github.com/unam-transients/colibri-blocks.git"
    ;;
  *)
    error "unable to determing URL."
    ;;
  esac

  etcdir="$tcsprefix"/etc/tcs/
  cd "$etcdir"

  log info "cloning from $url to blocks.new/."
  sudo rm -rf blocks.new
  sudo mkdir blocks.new
  if ! sudo git clone -q $url blocks.new/
  then
    error "clone failed."
  fi

  log info "moving blocks/ to blocks.old/."
  sudo rm -rf blocks.old
  sudo mv blocks blocks.old

  log info "moving blocks.new/ to blocks/."
  sudo mv blocks.new blocks

  log summary "finished fetching blocks."
  
  cd "$cwd"
  
  if $fetchonly
  then
    exit 0
  fi

fi

################################################################################


if test ! -r "$blockfile"
then
  log info "cannot read \"$blockfile\"."
  exit 1
fi

################################################################################

log info "blockfile is $blockfile."
log info "target date is $targetdate."

targetdayofyear="$(date +%j -d $targetdate | sed 's/^0*//')"
log info "target day of year is $targetdayofyear."

################################################################################

cd $(dirname "$blockfile")
blockfile=$(basename "$blockfile")

################################################################################

queuedir=/usr/local/var/tcs/blocks
sudo mkdir -p "$queuedir"

################################################################################

log info "generating blocks."

for script in *.sh
do
  log info "running $script generate."
  sudo sh $script generate
done

################################################################################

log summary "loading blocks."

awk \
  -v queuedir="$queuedir" \
  -v targetdate="$targetdate" \
  -v targetdayofyear="$targetdayofyear" \
'

function readfile(filename)
{
  ++filestackindex;
  printf("echo reading %s\n", filename);
  filenamestack[filestackindex] = filename;
  while ((getline < filenamestack[filestackindex]) > 0) {
    processline();
  }
  printf("echo finishedreading %s\n", filename);
  --filestackindex;
}

function processline() {

  if (NF == 0)
    return;
    
  if (substr($1, 0, 1) == "#")
    return;
    
  if ($1 == "include") {
    if (NF != 2) {
      printf("echo error \"invalid include directive: $0\"\n")
    } else {
      readfile($2)
    }
    return;
  }

  if (NF < 4) {
    printf("echo error \"invalid directive: %s\"\n", $0)
  }

  action     = $1;
  priority   = $2;
  duplicates = $3;
  blockfile  = $4;

  if (NF == 7 && $5 == "day") {
    phase = $6
    period = $7
    if (phase != targetdayofyear % period)
      return;
  }
  if (NF == 6 && $5 == "date") {
    date = $6
    if (date != targetdate)
      return;
  }

  if (duplicates > 999) {
    duplicates = 999
  }

  if (action == "load") {
    for (i = 0; i < duplicates; ++i)
      printf("for blockfile in %s.json; do echo load $blockfile %s-%03d-$blockfile; done\n", blockfile, priority, i)
  } else if (action == "unload") {
    if (duplicates == "*") {
      printf("echo unload - \"%s-*-%s.json\"\n", priority, blockfile)
    } else {
      for (i = 0; i < duplicates; ++i)
        printf("echo unload - \"%s-%03d-%s.json\"\n", priority, i, blockfile)
    }
  }

}

BEGIN {
  filestackindex = 0
  readfile(ARGV[1])
  exit(0)
}
' "$blockfile" |
sh |
while read action arg1 arg2
do
    if test "$action" = "reading"
  then
    log info "reading $arg1."
  elif test "$action" = "finishedreading"
  then
    log info "finished reading $arg1."
  elif test "$action" = "load"
  then
    log info "loading $arg2."
    sudo cp "$arg1" "$queuedir"/$arg2
  elif test "$action" = "unload"
  then
    log info "unloading $arg2."
    sudo rm -f "$queuedir"/$arg2
  elif test "$action" = "error"
  then
    log error "$arg1 $arg2"
  fi
done

################################################################################

log info "cleaning generated blocks."

for script in *.sh
do
  log info "running $script clean."
  sudo sh $script clean
done

################################################################################

tcs makeblockspage

################################################################################

log summary "finished loading blocks."

exit 0

################################################################################
