#!/bin/env python3

import gcn
from datetime import datetime
import xml.etree.ElementTree as ET

import socket
import json
import sys
import os
import re
from datetime import datetime
from datetime import timezone
import subprocess

################################################################################


def removelinecomments(s):
    r = re.compile("^[ \t]*//.*$", re.MULTILINE)
    return re.sub(r, "", s)


def serversfilename():
    if "tcsprefix" in os.environ:
        return os.environ["tcsprefix"] + "/etc/tcs/servers.json"
    else:
        return "/usr/local/etc/tcs/servers.json"


def readserversfile():
    filename = serversfilename()
    if not os.path.exists(filename):
        print("servers file does not exist: " + filename)
        sys.exit(1)
    try:
        with open(filename) as f:
            s = f.read(-1)
            data = json.loads(removelinecomments(s))
            return data
    except:
        print("servers file cannot be opened: " + filename)
        sys.exit(1)


def serverhost(serversdata, server):
    try:
        return str(serversdata[server]["host"])
    except:
        print("invalid server: " + server)
        sys.exit(1)


def serverport(serversdata, server):
    try:
        return int(serversdata[server]["port"])
    except:
        print("invalid server: " + server)
        sys.exit(1)


################################################################################

idsequence = 0
serversdata = readserversfile()


def request(server, method, params):

    global idsequence
    hostname = os.uname()[1]
    pid = os.getpid()
    id = "%s/%s/%d/%d" % (hostname, who, pid, idsequence)
    idsequence += 1
    request = {
        "jsonrpc": "2.0",
        "id": id,
        "method": method,
        "params": params,
    }
    requeststring = json.dumps(request) + "\n"
    requeststring = requeststring.encode(encoding="UTF-8", errors="strict")
    host = serverhost(serversdata, server)
    port = serverport(serversdata, server)
    try:
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.connect((host, port))
        s.sendall(requeststring)
    except:
        print("error while sending request", flush=True)


################################################################################


def isoformat(when=None, separator="T"):
    """
    Return the ISO representation of the current utc with millisecond precision.

    :return: A string of the form "YYYY-MM-DDTHH:MM:SS.SSS".
    """
    if when == None:
        when = now()
    return when.isoformat(separator, "milliseconds")[0:23]


def fromisoformat(when):
    if len(when) >= 23:
        return datetime.fromisoformat(when[0:23])
    else:
        return datetime.fromisoformat(when)


def now():
    return datetime.now()


################################################################################

statusdict = {}


def pushstatus(statusupdatedict={}):

    global statusdict
    statusdict.update(statusupdatedict)

    method = "pushstatus"
    params = ["svom", json.dumps(statusdict)]
    for server in ["html", "watchdog"]:
        request(server, method, params)


################################################################################

who = "svomserver"


def logerror(payload):
    log("error", payload)


def logwarning(payload):
    log("warning", payload)


def logsummary(payload):
    log("summary", payload)


def loginfo(payload):
    log("info", payload)


def logdebug(payload):
    log("debug", payload)


def log(type, payload):
    server = "log"
    timestamp = datetime.now().isoformat(" ", "milliseconds")
    request = {
        "method": "log",
        "params": {
            "who": who,
            "type": type,
            "payload": payload,
            "timestamp": timestamp,
        },
        "jsonrpc": "2.0",
    }
    requeststring = json.dumps(request) + "\n"
    requeststring = requeststring.encode(encoding="UTF-8", errors="strict")
    serversdata = readserversfile()
    host = serverhost(serversdata, server)
    port = serverport(serversdata, server)
    print("%s: %s: %s: %s" % (timestamp, who, type, payload), flush=True)
    try:
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.connect((host, port))
        s.sendall(requeststring)
    except:
        print("error while sending request", flush=True)


################################################################################


def xmltodict(s):

    root = ET.fromstring(s)

    alert = {}
    alert["alerttimestamp"] = root.find("./Who/Date").text
    if alert["alerttimestamp"][-1] == "Z":
        alert["alerttimestamp"] = alert["alerttimestamp"][:-1]

    if root.find("./What/Description") is not None and re.match(
        "^Broker test event", root.find("./What/Description").text
    ):

        alert["packettype"] = "svomtest"

    else:

        alert["packettypenumber"] = int(
            root.find("./What/Param[@name='Packet_Type']").get("value")
        )
        alert["packeserialnumber"] = int(
            root.find("./What/Param[@name='Pkt_Ser_Num']").get("value")
        )
        alert["instrument"] = root.find("./What/Param[@name='Instrument']").get("value")
        alert["noticelevel"] = root.find(
            "./What/Group[@name='Svom_Identifiers']/Param[@name='Notice_Level']"
        ).get("value")
        alert["burstid"] = root.find(
            "./What/Group[@name='Svom_Identifiers']/Param[@name='Burst_Id']"
        ).get("value")
        alert["eventtimestamp"] = root.find(
            "./WhereWhen/ObsDataLocation/ObservationLocation/AstroCoords/Time/TimeInstant/ISOTime"
        ).text
        if alert["eventtimestamp"][-1] == "Z":
            alert["eventtimestamp"] = alert["eventtimestamp"][:-1]

        packettypedict = {
            199: "svomgrmpreliminary",
            200: "svomeclairspreliminary",
            201: "svomgrmtrigger",
            202: "svomeclairswakeup",
            203: "svomeclairscatalog",
            204: "svomslewing",
            205: "svomnotslewing",
            206: "svomeclairsrefined",
            207: "svomgrmrefined",
            208: "svomeclairsgrmhr",
            209: "svommxtinitialqfnumber",
            210: "svommxtupdateqfnumber",
            211: "svomvtcandidate",
            212: "svomcgftcandidate",
            213: "svomgwaccandidate",
            214: "svomfgftcandidate",
            215: "svomretraction",
            216: "svomeclairsfinal",
            217: "svomgrmfinal",
            218: "svommxtfinal",
            219: "svomvtfinal",
        }
        packettypenumber = alert["packettypenumber"]
        if packettypenumber not in packettypedict:
            packettype = "svomunknown%d" % packettypenumber
        else:
            packettype = packettypedict[packettypenumber]
        alert["packettype"] = packettype

        if (
            root.find(
                "./WhereWhen/ObsDataLocation/ObservationLocation/AstroCoords/Position2D"
            )
            is not None
        ):
            alert["alpha"] = (
                root.find(
                    "./WhereWhen/ObsDataLocation/ObservationLocation/AstroCoords/Position2D/Value2/C1"
                ).text
                + "d"
            )
            alert["delta"] = (
                root.find(
                    "./WhereWhen/ObsDataLocation/ObservationLocation/AstroCoords/Position2D/Value2/C2"
                ).text
                + "d"
            )
            alert["uncertainty"] = (
                root.find(
                    "./WhereWhen/ObsDataLocation/ObservationLocation/AstroCoords/Position2D/Error2Radius"
                ).text
                + "d"
            )
            # SVOM uses -1.0 for an unknown uncertainty.
            if alert["uncertainty"][0] == "-":
                alert["uncertainty"] = "180d"

    for key in alert.keys():
        logdebug("alert: %-20s = %r" % (key, alert[key]))

    return alert


def respond(alert):

    def logresponse(s):
        log("summary", "%s: %s" % (alert["packettype"], s))
        return

    if alert["packettype"] == "svomtest":
        alerttimestamp = alert["alerttimestamp"]
        logresponse("alert time stamp is %s." % alerttimestamp)
        return

    blockidentifier = alert["burstid"][2:]

    year = int(alert["eventtimestamp"][2:4])
    month = int(alert["eventtimestamp"][5:7])
    day = int(alert["eventtimestamp"][8:10])
    hours = int(alert["eventtimestamp"][11:13])
    minutes = int(alert["eventtimestamp"][14:16])
    seconds = int(alert["eventtimestamp"][17:19])
    dayfraction = (hours + minutes / 60 + seconds / 3600) / 24
    eventname = "SVOM %02d%02d%02d.%03d" % (year, month, day, int(dayfraction * 1000))
    logresponse("event name is %s." % eventname)

    origin = "svom"
    identifier = alert["burstid"][2:]
    alerttype = alert["packettype"]
    logresponse(
        "origin/identifier/type are %s/%s/%s." % (origin, identifier, alerttype)
    )

    alerttimestamp = alert["alerttimestamp"]
    logresponse("alert time stamp is %s." % alerttimestamp)

    eventtimestamp = alert["eventtimestamp"]
    logresponse("event time stamp is %s." % eventtimestamp)

    #        199: "svomgrmpreliminary",
    #        200: "svomeclairspreliminary",
    #        201: "svomgrmtrigger",
    #        202: "svomeclairswakeup",
    #        203: "svomeclairscatalog",
    #        204: "svomslewing",
    #        205: "svomnotslewing",
    #        206: "svomeclairsrefined",
    #        207: "svomgrmrefined",
    #        208: "svomeclairsgrmhr",
    #        209: "svommxtinitialqfnumber",
    #        210: "svommxtupdateqfnumber",
    #        211: "svomvtcandidate",
    #        212: "svomcgftcandidate",
    #        213: "svomgwaccandidate",
    #        214: "svomfgftcandidate",
    #        215: "svomretraction",
    #        216: "svomeclairsfinal",
    #        217: "svomgrmfinal",
    #        218: "svommxtfinal",
    #        219: "svomvtfinal",

    if alerttype == "svomeclairscatalog" or alerttype == "svomretraction":
        enabled = "false"
        preliminary = ""
    elif alerttype == "svomslewing" or alerttype == "svomnotslewing":
        enabled = ""
        preliminary = ""
    elif alerttype == "svomgrmpreliminary" or alerttype == "svomeclairspreliminary":
        enabled = "true"
        preliminary = "true"
    else:
        enabled = "true"
        preliminary = "false"

    if "alpha" in alert and "delta" in alert and "uncertainty" in alert:
        alpha = alert["alpha"]
        delta = alert["delta"]
        uncertainty = alert["uncertainty"]
    else:
        alpha = "0h"
        delta = "-90d"
        uncertainty = "180d"
    equinox = "2000"
    logresponse("position is %s %s %s." % (alpha, delta, equinox))
    logresponse("90%% uncertainty is %s in radius." % uncertainty)
    logresponse("enabled is %r." % enabled)
    logresponse("preliminary is %r." % preliminary)

    logresponse("requesting selector to respond.")

    logresponse(
        "tcs request selector respondtoalert %r %r %r %r %r %r %r %r %r %r %r %r %r %r %r %r"
        % (
            blockidentifier,
            eventname,
            origin,
            identifier,
            alerttype,
            alerttimestamp,
            eventtimestamp,
            enabled,
            alpha,
            delta,
            equinox,
            uncertainty,
            "grb",
            "electromagnetic",
            "",
            preliminary,
        )
    )
    subprocess.run(
        [
            "tcs",
            "request",
            "selector",
            "respondtoalert",
            blockidentifier,
            eventname,
            origin,
            identifier,
            alerttype,
            alerttimestamp,
            eventtimestamp,
            enabled,
            alpha,
            delta,
            equinox,
            uncertainty,
            "grb",
            "electromagnetic",
            "",
            preliminary,
        ]
    )


if False:
    respond(
        xmltodict(
            b'<?xml version="1.0" encoding="UTF-8"?>\n<voe:VOEvent\n  xmlns:voe="http://www.ivoa.net/xml/VOEvent/v2.0"\n  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n  xsi:schemaLocation="http://www.ivoa.net/xml/VOEvent/v2.0 http://www.ivoa.net/xml/VOEvent/VOEvent-v2.0.xsd"\n  role="observation"\n  version="2.0"\n  ivorn="ivo://org.svom/fsc#sb25022114_grm-preliminary">\n  <Who>\n    <AuthorIVORN>ivo://org.svom/FSC</AuthorIVORN>\n    <Date>2025-02-21T20:47:53</Date>\n    <Author>\n      <title>SVOM French Science Center</title>\n      <shortName>FSC</shortName>\n      <contactName>Timothe Roland</contactName>\n      <contactEmail>svom-contact@cea.fr</contactEmail>\n    </Author>\n  </Who>\n  <What>\n    <Param name="Packet_Type" value="199" ucd="meta.id"/>\n    <Param name="Pkt_Ser_Num" value="1" ucd="meta.id"/>\n    <Param name="Instrument" value="GRM" ucd="instr"/>\n    <Group name="Svom_Identifiers">\n      <Param name="Notice_Level" value="N1g" ucd="meta.id"/>\n      <Param name="Burst_Id" value="sb25022114" ucd="meta.id"/>\n    </Group>\n    <Group name="Detection_Info">\n      <Param name="SNR" value="5.70" unit="sigma" ucd="stat.snr"/>\n      <Param name="Timescale" value="1.0" unit="s" ucd="time.interval"/>\n      <Param name="Time_Window_Start" value="2025-02-21T20:47:34.000Z" ucd="time.start"/>\n      <Param name="Time_Window_End" value="2025-02-21T20:47:35.000Z" ucd="time.end"/>\n      <Param name="Lower_Energy_Bound" value="31.311155" unit="keV" ucd="em.energy"/>\n      <Param name="Upper_Energy_Bound" value="105.319336" unit="keV" ucd="em.energy"/>\n      <Param name="Triggered_GRDs" value="111" ucd="instr.param"/>\n    </Group>\n    <Group name="Target_Info">\n      <Param name="Galactic_Lon" value="4.82" unit="deg" ucd="pos.galactic.lon"/>\n      <Param name="Galactic_Lat" value="21.38" unit="deg" ucd="pos.galactic.lat"/>\n      <Param name="Moon_Angle" value="15.24" unit="deg" ucd="pos.angDistance"/>\n      <Param name="Sun_Angle" value="82.65" unit="deg" ucd="pos.angDistance"/>\n    </Group>\n    <Group name="Satellite_Info">\n      <Param name="Attitude_Ra" value="238.50" unit="deg" ucd="instr.param"/>\n      <Param name="Attitude_Dec" value="-15.44" unit="deg" ucd="instr.param"/>\n      <Param name="Attitude_Roll" value="258.22" unit="deg" ucd="instr.param"/>\n    </Group>\n  </What>\n  <WhereWhen>\n    <ObsDataLocation>\n      <ObservatoryLocation id="GEOLEO"/>\n      <ObservationLocation>\n        <AstroCoordSystem id="UTC-ICRS-GEO"/>\n        <AstroCoords coord_system_id="UTC-ICRS-GEO">\n          <Time unit="s">\n            <TimeInstant>\n              <ISOTime>2025-02-21T20:47:34</ISOTime>\n            </TimeInstant>\n          </Time>\n          <Position2D unit="deg">\n            <Name1>RA</Name1>\n            <Name2>Dec</Name2>\n            <Value2>\n              <C1>250.2974</C1>\n              <C2>-12.9603</C2>\n            </Value2>\n            <Error2Radius>-1.0000</Error2Radius>\n          </Position2D>\n        </AstroCoords>\n      </ObservationLocation>\n    </ObsDataLocation>\n  </WhereWhen>\n  <Why importance="0.57">\n    <Inference probability="0.57">\n      <Concept>process.variation.burst;em.gamma</Concept>\n    </Inference>\n  </Why>\n  <How>\n    <Description>N1g notice, data from GRM</Description>\n    <Reference uri="https://www.svom.eu/en/grm-gamma-ray-burst-monitor-en/"/>\n  </How>\n</voe:VOEvent>\n'
        )
    )
    exit(0)


if False:
    alert = {}
    alert["alerttimestamp"] = "2024-12-03T16:26:3"
    alert["packettypenumber"] = 207
    alert["packeserialnumber"] = 1
    alert["instrument"] = "GRM"
    alert["noticelevel"] = "N2g"
    alert["burstid"] = "sb24100102"
    alert["eventtimestamp"] = "2024-10-01T17:08:45.244000"
    alert["packettype"] = "svomgrmrefined"
    alert["alpha"] = "20.4243d"
    alert["delta"] = "-43.5338d"
    alert["uncertainty"] = "-1.0000"

    respond(alert)
    exit(0)


def handler(payload, root):
    logdebug("handing: %r" % payload)
    alert = xmltodict(payload)
    respond(alert)
    pushstatus(
        {
            "timestamp": isoformat(),
        }
    )


loginfo("starting server.")
pushstatus(
    {
        "pid": os.getpid(),
        "starttimestamp": isoformat(),
        "status": "starting",
        "statustimestamp": isoformat(),
        "activity": "starting",
        "requestedactivity": "idle",
        "requestedactivitytimestamp": isoformat(),
        "timestamp": isoformat(),
        "datalifeseconds": 7200,
    }
)

pushstatus(
    {
        "status": "ok",
        "starttimestamp": isoformat(),
        "activity": "idle",
        "activitytimestamp": isoformat(),
        "timestamp": isoformat(),
    }
)
gcn.listen(
    host="voevent.svom.eu",
    port=8099,
    handler=handler,
    iamalive_timeout=100.0,
    max_reconnect_timeout=1,
)
