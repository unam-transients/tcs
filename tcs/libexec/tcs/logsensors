#!/bin/sh

########################################################################

# This file is part of the UNAM telescope control system.

########################################################################

# Copyright Â© 2009 Alan M. Watson <alan@astro.unam.mx>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL
# WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE
# AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL
# DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR
# PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
# TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
# PERFORMANCE OF THIS SOFTWARE.

########################################################################

#\
umask 0; exec /usr/bin/tclsh8.6 -encoding "utf-8" "$0" ${1+"$@"}

source [file join $::env(tcsprefix) "lib" "tcs" "packages.tcl"]

package require "client"
package require "config"
package require "utcclock"
package require "directories"

if {[catch {client::update "sensors"} message]} {
  puts stderr "tcs logsensors: error: unable to update sensors data: $message"
  exit 1
}

set status [client::getstatus "sensors"]
if {![string equal $status "ok"]} {
  puts stderr "tcs logsensors: error: sensors status is \"$status\"."
  exit 1
}

set directoryname [file join [directories::vartoday] "sensors"]
if {[catch {file mkdir $directoryname}]} {
  puts stderr "tcs logsensors: error: unable to make directory \"$directoryname\"."
  exit 1
}

set filename [file join $directoryname [format "sensors-%s.json" [utcclock::combinedformat now 0 false]]]
if {[catch {set channel [open $filename "w"]}]} {
  puts stderr "tcs logsensors: error: unable to opening file \"$filename\"."
  exit 1
}

if {[catch {

  set lognames [config::getvalue "sensors" "lognames"]
  set sensors  [config::getvalue "sensors" "sensors"]

  puts $channel "\{"
  puts $channel "  \"frame_model\": \"1.0\","
  puts $channel "  \"producer_name\": \"TCS\","
  puts $channel "  \"sensor\": \["

  set first true
  foreach name $lognames {
    if {!$first} {
      puts $channel "    ,"
    }
    set value     [client::getdata "sensors" $name]
    set timestamp [client::getdata "sensors" ${name}-timestamp]
    set rawvalue  [client::getdata "sensors" ${name}-raw]
    if {![string equal $rawvalue ""] && ![string equal $timestamp ""]} {
      set errorcode 0
    } else {
      set errorcode 1
    }
    set prettyname [dict get $sensors $name prettyname]
    set subsystem  [dict get $sensors $name subsystem]
    set component  [dict get $sensors $name component]
    set group      [dict get $sensors $name group]
    set model      [dict get $sensors $name model]
    set identifier [dict get $sensors $name identifier]
    set firmware   [dict get $sensors $name firmware]
    set type       [dict get $sensors $name type]
    set unit       [dict get $sensors $name unit]
    if {[dict exists $sensors $name correctionmodel]} {
      set correctionmodel [dict get $sensors $name correctionmodel]
    } else {
      set correctionmodel ""
    }
    set first false
    puts $channel "    \{"
    puts $channel "      \"name\"            : \"$name\","
    puts $channel "      \"value\"           : \"$value\","
    puts $channel "      \"date\"            : \"$timestamp\","
    puts $channel "      \"pretty_name\"     : \"$prettyname\","
    puts $channel "      \"subsystem\"       : \"$subsystem\","
    puts $channel "      \"component\"       : \"$component\","
    puts $channel "      \"group\"           : \"$group\","
    puts $channel "      \"model\"           : \"$model\","
    puts $channel "      \"identifier\"      : \"$identifier\","
    puts $channel "      \"firmware\"        : \"$firmware\","
    puts $channel "      \"type\"            : \"$type\","
    puts $channel "      \"unit\"            : \"$unit\","
    puts $channel "      \"correction_model\": \"$correctionmodel\","
    puts $channel "      \"raw_value\"       : \"$rawvalue\","
    puts $channel "      \"error_code\"      : $errorcode"
    puts $channel "    \}"
  }

  puts $channel "  \]"
  puts $channel "\}"
} message]} {
  puts stderr "tcs logsensors: error: while writing sensors data: $message."
  exit 1
}

if {[catch {close $channel}]} {
  puts stderr "tcs logsensors: error: while closing file \"$filename\"."
  exit 1
}
