#!/usr/bin/env python3

import socket
import json
import sys
import os
import re
from datetime import datetime
from datetime import timezone
import gcn_kafka
import xmltodict

################################################################################


def removelinecomments(s):
    r = re.compile("^[ \t]*//.*$", re.MULTILINE)
    return re.sub(r, "", s)


def serversfilename():
    if "tcsprefix" in os.environ:
        return os.environ["tcsprefix"] + "/etc/tcs/servers.json"
    else:
        return "/usr/local/etc/tcs/servers.json"


def readserversfile():
    filename = serversfilename()
    if not os.path.exists(filename):
        print("servers file does not exist: " + filename)
        sys.exit(1)
    try:
        with open(filename) as f:
            s = f.read(-1)
            data = json.loads(removelinecomments(s))
            return data
    except:
        print("servers file cannot be opened: " + filename)
        sys.exit(1)


def serverhost(serversdata, server):
    try:
        return str(serversdata[server]["host"])
    except:
        print("invalid server: " + server)
        sys.exit(1)


def serverport(serversdata, server):
    try:
        return int(serversdata[server]["port"])
    except:
        print("invalid server: " + server)
        sys.exit(1)


################################################################################

idsequence = 0
serversdata = readserversfile()


def request(server, method, params):

    global idsequence
    hostname = os.uname()[1]
    pid = os.getpid()
    id = "%s/%s/%d/%d" % (hostname, who, pid, idsequence)
    idsequence += 1
    request = {
        "jsonrpc": "2.0",
        "id": id,
        "method": method,
        "params": params,
    }
    requeststring = json.dumps(request) + "\n"
    requeststring = requeststring.encode(encoding="UTF-8", errors="strict")
    host = serverhost(serversdata, server)
    port = serverport(serversdata, server)
    try:
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.connect((host, port))
        s.sendall(requeststring)
    except:
        print("error while sending request", flush=True)


################################################################################


def isoformat(when=None, separator="T"):
    """
    Return the ISO representation of the current utc with millisecond precision.

    :return: A string of the form "YYYY-MM-DDTHH:MM:SS.SSS".
    """
    if when == None:
        when = now()
    return when.isoformat(separator, "milliseconds")[0:23]


def fromisoformat(when):
    if len(when) >= 23:
        return datetime.fromisoformat(when[0:23])
    else:
        return datetime.fromisoformat(when)


def now():
    return datetime.now()


################################################################################

statusdict = {}


def pushstatus(statusupdatedict={}):

    global statusdict
    statusdict.update(statusupdatedict)

    method = "pushstatus"
    params = ["gcn", json.dumps(statusdict)]
    for server in ["html", "watchdog"]:
        request(server, method, params)


################################################################################

who = "gcnserver"


def logerror(payload):
    log("error", payload)


def logwarning(payload):
    log("warning", payload)


def logsummary(payload):
    log("summary", payload)


def loginfo(payload):
    log("info", payload)


def logdebug(payload):
    log("debug", payload)


def log(type, payload):
    server = "log"
    timestamp = isoformat(separator=" ")
    request = {
        "method": "log",
        "params": {
            "who": who,
            "type": type,
            "payload": payload,
            "timestamp": timestamp,
        },
        "jsonrpc": "2.0",
    }
    requeststring = json.dumps(request) + "\n"
    requeststring = requeststring.encode(encoding="UTF-8", errors="strict")
    serversdata = readserversfile()
    host = serverhost(serversdata, server)
    port = serverport(serversdata, server)
    print("%s: %s: %s: %s" % (timestamp, who, type, payload), flush=True)
    try:
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.connect((host, port))
        s.sendall(requeststring)
    except:
        print("error while sending request", flush=True)


################################################################################


def compactmessagetype(messagetype):

    compactmessagetype = messagetype
    compactmessagetype = compactmessagetype.removeprefix("gcn.")
    compactmessagetype = compactmessagetype.removeprefix("notices.")
    compactmessagetype = compactmessagetype.removeprefix("classic.")
    compactmessagetype = compactmessagetype.removeprefix("voevent.")
    compactmessagetype = compactmessagetype.replace("_", "")
    compactmessagetype = compactmessagetype.replace(".", "")
    compactmessagetype = compactmessagetype.lower()

    return compactmessagetype


################################################################################


def respond(
    alertisotimestamp,
    eventorigin,
    eventidentifier,
    eventtype,
    eventprefix,
    eventisotimestamp,
    eventalpha,
    eventdelta,
    eventequinox,
    eventuncertainty,
    eventclass,
    eventmessenger,
    enabled,
    preliminary,
):

    def logresponse(s):
        log("summary", "%s: %s" % (eventtype, s))
        return

    def trueorfalse(value):
        if value:
            return "true"
        else:
            return "false"

    year = int(eventisotimestamp[2:4])
    month = int(eventisotimestamp[5:7])
    day = int(eventisotimestamp[8:10])
    hours = int(eventisotimestamp[11:13])
    minutes = int(eventisotimestamp[14:16])
    seconds = int(eventisotimestamp[17:19])
    dayfraction = (hours + minutes / 60 + seconds / 3600) / 24
    eventname = "%s %02d%02d%02d.%03d" % (
        eventprefix,
        year,
        month,
        day,
        int(dayfraction * 1000),
    )
    logresponse("event name is %s." % eventname)

    logresponse(
        "event origin/identifier/type are %s/%s/%s."
        % (eventorigin, eventidentifier, eventtype)
    )

    logresponse("event time stamp is %s." % eventisotimestamp)
    logresponse("alert time stamp is %s." % alertisotimestamp)
    eventdatetime = fromisoformat(eventisotimestamp)
    alertdatetime = fromisoformat(alertisotimestamp)
    alertdelay = (alertdatetime - eventdatetime).total_seconds()
    logresponse("alert delay is %.3f seconds." % alertdelay)

    logresponse("position is %s %s %s." % (eventalpha, eventdelta, eventequinox))
    logresponse("90%% uncertainty is %s in radius." % eventuncertainty)
    logresponse("event %s enabled." % ("is" if enabled else "is not"))
    logresponse("event %s preliminary." % ("is" if preliminary else "is not"))

    logresponse("requesting selector to respond.")

    # We don't really use the specified block identifier any more.
    blockidentifier = "0"

    logresponse(
        "tcs request selector respondtoalert %r %r %r %r %r %r %r %r %r %r %r %r %r %r %r %r"
        % (
            blockidentifier,
            eventname,
            eventorigin,
            eventidentifier,
            eventtype,
            alertisotimestamp,
            eventisotimestamp,
            trueorfalse(enabled),
            eventalpha,
            eventdelta,
            eventequinox,
            eventuncertainty,
            eventclass,
            eventmessenger,
            "",
            trueorfalse(preliminary),
        )
    )
    request(
        "selector",
        "respondtoalert",
        [
            blockidentifier,
            eventname,
            eventorigin,
            eventidentifier,
            eventtype,
            alertisotimestamp,
            eventisotimestamp,
            trueorfalse(enabled),
            eventalpha,
            eventdelta,
            eventequinox,
            eventuncertainty,
            eventclass,
            eventmessenger,
            "",
            trueorfalse(preliminary),
        ],
    )

    logresponse("finished requesting selector to respond.")


################################################################################


def voeventtodict(messagevalue):
    """
    Convert a string containing XML representation of a VOEvent to a dictionary.

    :param messagevalue: A string containing the XML representaion of the VOEvent.
    :return: The dictionary representation of the VOEvent.
    """
    return xmltodict.parse(messagevalue.decode("UTF-8"))["voe:VOEvent"]


def getvoeventalphadelta(value):
    """
    Return the alpha and delta values in the dictionary representation of a VOEvent.

    :param value: The dictionary representation of the VOEvent.
    :return: The alpha and delta values in degrees.
    """
    value2 = value["WhereWhen"]["ObsDataLocation"]["ObservationLocation"][
        "AstroCoords"
    ]["Position2D"]["Value2"]
    return float(value2["C1"]), float(value2["C2"])


################################################################################

handleheartbeatcount = 0


def handleheartbeatmessage(messagetype, messagevalue):
    """
    Handle a heartbeat message.

    :param messagetype: A string describing the message type. This must be
        `"gcn.heartbeat"`.
    :param messagevalue: A string encoding the message value.
    """

    assert messagetype == "gcn.heartbeat"
    messagetype = compactmessagetype(messagetype)

    global handleheartbeatcount
    handleheartbeatcount += 1
    if handleheartbeatcount == 60:
        handleheartbeatcount = 0
        loginfo("received %s message." % messagetype)
        value = json.loads(messagevalue.decode("UTF-8"))
        eventisotimestamp = value["alert_datetime"]
        eventdatetime = fromisoformat(eventisotimestamp)
        alertdatetime = now()
        alertdelay = (alertdatetime - eventdatetime).total_seconds()
        loginfo("%s: alert delay is %.3f seconds." % (messagetype, alertdelay))


################################################################################


def handleswiftmessage(messagetype, messagevalue):
    """
    Handle a Swift message.

    :param messagetype: A string describing the message type. This must be
        `"gcn.classic.voevent.SWIFT_ACTUAL_POINTDIR"`.
    :param messagevalue: A string encoding the message value.
    """

    assert messagetype == "gcn.classic.voevent.SWIFT_ACTUAL_POINTDIR"
    messagetype = compactmessagetype(messagetype)

    loginfo("received %s message." % messagetype)

    value = voeventtodict(messagevalue)

    alpha, delta = getvoeventalphadelta(value)
    equinox = "2000"
    loginfo("%s: position is %.4fd %+.4fd %s." % (messagetype, alpha, delta, equinox))


def handlefermimessage(messagetype, messagevalue):
    loginfo("fermi message.")
    loginfo("received %s message." % messagetype)
    loginfo("value is %r" % messagevalue.decode("UTF-8"))


def handlemaximessage(messagetype, messagevalue):
    loginfo("maxi message.")
    loginfo("received %s message." % messagetype)
    loginfo("value is %r" % messagevalue.decode("UTF-8"))


def handlesvommessage(messagetype, messagevalue):
    loginfo("svom message.")
    loginfo("received %s message." % messagetype)
    loginfo("raw value is %r" % messagevalue.decode("UTF-8"))


def handleeinsteinprobemessage(messagetype, messagevalue):
    """
    Handle a Einstein Probe message.

    :param messagetype: A string describing the message type. This must be
        `"gcn.notices.einstein_probe.wxt.alert"`.
    :param messagevalue: A string encoding the message value.
    """

    assert messagetype == "gcn.notices.einstein_probe.wxt.alert"
    messagetype = compactmessagetype(messagetype)

    loginfo("received %s message." % messagetype)

    alertisotimestamp = isoformat()

    value = json.loads(messagevalue.decode("UTF-8"))

    eventorigin = "ep"
    eventidentifier = value["id"][0]
    eventtype = messagetype
    eventisotimestamp = value["trigger_time"]
    eventprefix = "EP"
    eventalpha = "%.4fd" % value["ra"]
    eventdelta = "%+.4fd" % value["dec"]
    eventequinox = "2000.0"
    eventuncertainty = "%.4fd" % value["ra_dec_error"]
    enabled = True
    eventclass = "xrt"
    eventmessenger = "electromagnetic"
    preliminary = False

    respond(
        alertisotimestamp,
        eventorigin,
        eventidentifier,
        eventtype,
        eventprefix,
        eventisotimestamp,
        eventalpha,
        eventdelta,
        eventequinox,
        eventuncertainty,
        eventclass,
        eventmessenger,
        enabled,
        preliminary,
    )


################################################################################

loginfo("starting server.")
pushstatus(
    {
        "pid": os.getpid(),
        "starttimestamp": isoformat(),
        "status": "starting",
        "statustimestamp": isoformat(),
        "activity": "starting",
        "requestedactivity": "idle",
        "requestedactivitytimestamp": isoformat(),
        "timestamp": isoformat(),
        "datalifeseconds": 10,
    }
)

credentials = json.load(open("/usr/local/etc/tcs/gcncredentials.json"))

consumerconfig = {}

# Use this config to download all of the events in the buffers. See
# https://github.com/nasa-gcn/gcn-kafka-python/blob/main/README.md
testing = True
if testing:
    consumerconfig.update({"auto.offset.reset": "earliest"})

consumer = gcn_kafka.Consumer(
    client_id=credentials["id"],
    client_secret=credentials["secret"],
    config=consumerconfig,
)

topics = [
    # "gcn.notices.svom.voevent.grm",
    # "gcn.notices.svom.voevent.eclairs",
    # "gcn.notices.svom.voevent.mxt",
    "gcn.notices.einstein_probe.wxt.alert",
    "gcn.classic.voevent.SWIFT_ACTUAL_POINTDIR",
    # "gcn.classic.voevent.SWIFT_BAT_ALARM_LONG",
    # "gcn.classic.voevent.SWIFT_BAT_ALARM_SHORT",
    # "gcn.classic.voevent.SWIFT_BAT_GRB_ALERT",
    # "gcn.classic.voevent.SWIFT_BAT_GRB_LC",
    # "gcn.classic.voevent.SWIFT_BAT_GRB_LC_PROC",
    # "gcn.classic.voevent.SWIFT_BAT_GRB_POS_ACK",
    # "gcn.classic.voevent.SWIFT_BAT_GRB_POS_NACK",
    # "gcn.classic.voevent.SWIFT_BAT_GRB_POS_TEST",
    # "gcn.classic.voevent.SWIFT_BAT_KNOWN_SRC",
    # "gcn.classic.voevent.SWIFT_BAT_MONITOR",
    # "gcn.classic.voevent.SWIFT_BAT_QL_POS",
    # "gcn.classic.voevent.SWIFT_BAT_SCALEDMAP",
    # "gcn.classic.voevent.SWIFT_BAT_SLEW_POS",
    # "gcn.classic.voevent.SWIFT_BAT_SUB_THRESHOLD",
    # "gcn.classic.voevent.SWIFT_BAT_SUBSUB",
    # "gcn.classic.voevent.SWIFT_BAT_TRANS",
    # "gcn.classic.voevent.SWIFT_FOM_OBS",
    # "gcn.classic.voevent.SWIFT_FOM_PPT_ARG_ERR",
    # "gcn.classic.voevent.SWIFT_FOM_SAFE_POINT",
    # "gcn.classic.voevent.SWIFT_FOM_SLEW_ABORT",
    # "gcn.classic.voevent.SWIFT_POINTDIR",
    # "gcn.classic.voevent.SWIFT_SC_SLEW",
    # "gcn.classic.voevent.SWIFT_TOO_FOM",
    # "gcn.classic.voevent.SWIFT_TOO_SC_SLEW",
    # "gcn.classic.voevent.SWIFT_UVOT_DBURST",
    # "gcn.classic.voevent.SWIFT_UVOT_DBURST_PROC",
    # "gcn.classic.voevent.SWIFT_UVOT_EMERGENCY",
    # "gcn.classic.voevent.SWIFT_UVOT_FCHART",
    # "gcn.classic.voevent.SWIFT_UVOT_FCHART_PROC",
    # "gcn.classic.voevent.SWIFT_UVOT_POS",
    # "gcn.classic.voevent.SWIFT_UVOT_POS_NACK",
    # "gcn.classic.voevent.SWIFT_XRT_CENTROID",
    # "gcn.classic.voevent.SWIFT_XRT_EMERGENCY",
    # "gcn.classic.voevent.SWIFT_XRT_IMAGE",
    # "gcn.classic.voevent.SWIFT_XRT_IMAGE_PROC",
    # "gcn.classic.voevent.SWIFT_XRT_LC",
    # "gcn.classic.voevent.SWIFT_XRT_POSITION",
    # "gcn.classic.voevent.SWIFT_XRT_SPECTRUM",
    # "gcn.classic.voevent.SWIFT_XRT_SPECTRUM_PROC",
    # "gcn.classic.voevent.SWIFT_XRT_SPER",
    # "gcn.classic.voevent.SWIFT_XRT_SPER_PROC",
    # "gcn.classic.voevent.SWIFT_XRT_THRESHPIX",
    # "gcn.classic.voevent.SWIFT_XRT_THRESHPIX_PROC",
    # "gcn.classic.voevent.FERMI_GBM_ALERT",
    # "gcn.classic.voevent.FERMI_GBM_FIN_POS",
    # "gcn.classic.voevent.FERMI_GBM_FLT_POS",
    # "gcn.classic.voevent.FERMI_GBM_GND_POS",
    # "gcn.classic.voevent.FERMI_GBM_LC",
    # "gcn.classic.voevent.FERMI_GBM_POS_TEST",
    # "gcn.classic.voevent.FERMI_GBM_SUBTHRESH",
    # "gcn.classic.voevent.FERMI_GBM_TRANS",
    # "gcn.classic.voevent.FERMI_LAT_GND",
    # "gcn.classic.voevent.FERMI_LAT_MONITOR",
    # "gcn.classic.voevent.FERMI_LAT_OFFLINE",
    # "gcn.classic.voevent.FERMI_LAT_POS_DIAG",
    # "gcn.classic.voevent.FERMI_LAT_POS_INI",
    # "gcn.classic.voevent.FERMI_LAT_POS_TEST",
    # "gcn.classic.voevent.FERMI_LAT_POS_UPD",
    # "gcn.classic.voevent.FERMI_LAT_TRANS",
    # "gcn.classic.voevent.FERMI_POINTDIR",
    # "gcn.classic.voevent.FERMI_SC_SLEW",
    # "gcn.classic.voevent.MAXI_KNOWN",
    # "gcn.classic.voevent.MAXI_TEST",
    # "gcn.classic.voevent.MAXI_UNKNOWN",
]
if not testing:
    topics.append("gcn.heartbeat")

consumer.subscribe(topics)

pushstatus(
    {
        "status": "ok",
        "starttimestamp": isoformat(),
        "activity": "idle",
        "activitytimestamp": isoformat(),
        "timestamp": isoformat(),
    }
)

while True:
    for message in consumer.consume(timeout=5):
        if message.error():
            print(message.error())
            logerror(str(message.error()))
            continue
        messagetype = message.topic()
        messagevalue = message.value()
        if messagetype.startswith("gcn.heartbeat"):
            handleheartbeatmessage(messagetype, messagevalue)
        elif messagetype.startswith("gcn.classic.voevent.SWIFT"):
            handleswiftmessage(messagetype, messagevalue)
        elif messagetype.startswith("gcn.classic.voevent.MAXI"):
            handlemaximessage(messagetype, messagevalue)
        elif messagetype.startswith("gcn.classic.voevent.FERMI"):
            handlefermimessage(messagetype, messagevalue)
        elif messagetype.startswith("gcn.notices.svom.voevent"):
            handlesvommessage(messagetype, messagevalue)
        elif messagetype.startswith("gcn.notices.einstein_probe.wxt.alert"):
            handleeinsteinprobemessage(messagetype, messagevalue)
        else:
            logwarning('unknown message type "%s".' % messagetype)
        pushstatus(
            {
                "timestamp": isoformat(),
            }
        )
